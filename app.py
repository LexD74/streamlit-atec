# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# pip install streamlit pandas numpy plotly statsmodels requests

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.arima.model import ARIMA
import io
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–í–û–ô
st.set_page_config(
    page_title="–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–ª—è –¥–µ—Ñ–æ–ª—Ç–∞) - –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
TEXT_DATA = """
row12: –¢–ì-1,19083.339,19099.848,20198.268,17815.938,15979.626,5968.434,15049.62,,,,,,35
row13: –¢–ì-2,21099.267,22215.228,23102.49,9504.6,13458.012,7172.472,13364.682,,,,,,35
row14: –¢–ì-3,7874.882,22152.536,16714.776,12369.976,9755.88,17620.768,16510.536,,,,,,35
row15: –¢–ì-4,35390.037,2356.61,17064.096,37191.168,26336.058,32451.132,26977.524,,,,,,61
row16: –¢–ì-5,0,0,0,0,0,13.704,19.784,,,,,,40
row17: –¢–ì-6,180.578,7.68,0,0,0,0,0,,,,,,20
row18: –¢–ì-7,19727.532,18906.786,17595.426,8408.034,11336.46,4649.136,0,,,,,,30
"""

months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
hours_per_month = [744, 672, 744, 720, 744, 720, 744, 744, 720, 744, 720, 744]
hours_df = pd.DataFrame({'–ú–µ—Å—è—Ü': months, '–ß–∞—Å—ã': hours_per_month})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
def parse_data_from_text(text_data):
    lines = text_data.strip().split('\n')
    generation_data = {}
    
    for line in lines:
        if ':' in line:
            row_part = line.split(':')[0]
            if row_part.startswith('row') and row_part[3:].isdigit():
                row_num = int(row_part[3:])
                if 12 <= row_num <= 18:
                    content = line.split(':')[1].strip()
                    parts = [p.strip() for p in content.split(',')]
                    if len(parts) > 0 and parts[0].startswith('–¢–ì-'):
                        tg = parts[0]
                        values = []
                        for i in range(1, 13):
                            if i < len(parts) and parts[i] != '':
                                try:
                                    values.append(float(parts[i]))
                                except ValueError:
                                    values.append(0.0)
                            else:
                                values.append(0.0)
                        generation_data[tg] = {months[i]: values[i] for i in range(12)}
                        if len(parts) > 13 and parts[13] != '':
                            generation_data[tg]['N_—É—Å—Ç'] = float(parts[13])
                        else:
                            generation_data[tg]['N_—É—Å—Ç'] = 0
    
    # DataFrame –¥–ª—è –≤—ã—Ä–∞–±–æ—Ç–∫–∏
    gen_data = []
    for tg, data in generation_data.items():
        row = {'–¢–ì': tg}
        for month in months:
            row[month] = data.get(month, 0)
        row['N_—É—Å—Ç'] = data.get('N_—É—Å—Ç', 0)
        gen_data.append(row)
    gen_df = pd.DataFrame(gen_data)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ò–£–ú –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –∏ N_—É—Å—Ç
    kium_data = []
    for _, row in gen_df.iterrows():
        monthly_kium = []
        for month in months:
            hours = hours_df.loc[hours_df['–ú–µ—Å—è—Ü'] == month, '–ß–∞—Å—ã'].values[0]
            if row['N_—É—Å—Ç'] > 0 and hours > 0:
                kium_val = row[month] / (row['N_—É—Å—Ç'] * hours)
                kium_val = max(0.0, min(1.0, kium_val))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º [0, 1]
            else:
                kium_val = 0.0
            monthly_kium.append(kium_val)
        kium_data.append({
            '–¢–ì': row['–¢–ì'],
            **dict(zip(months, monthly_kium)),
            '–ö–ò–£–ú_–æ–±—â–∏–π': np.mean(monthly_kium)
        })
    kium_df = pd.DataFrame(kium_data)
    
    return kium_df, gen_df, hours_df

# –ö—ç—à–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
@st.cache_data
def get_parsed_data():
    return parse_data_from_text(TEXT_DATA)

# –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π CSS –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1 {
        color: #1f1f1f;
        font-weight: 600;
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
        font-size: 1.8rem;
    }
    
    h2, h3 {
        color: #2c2c2c;
        font-weight: 500;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .css-1d391kg {
        background-color: #f8f9fa;
        border-right: 1px solid #e0e0e0;
    }
    
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        width: 100%;
        border-radius: 4px;
        border: 1px solid #d0d0d0;
        background-color: white;
        color: #1f1f1f;
        font-weight: 500;
        padding: 0.5rem 1rem;
        transition: all 0.2s;
    }
    
    .stButton > button:hover {
        background-color: #f0f0f0;
        border-color: #a0a0a0;
    }
    
    .stButton > button:focus {
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
    
    /* –°–µ–ª–µ–∫—Ç—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div > select,
    .stTextInput > div > div > input,
    .stNumberInput > div > div > input {
        border: 1px solid #d0d0d0;
        border-radius: 4px;
        background-color: white;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="stMetric"] {
        background-color: white;
        padding: 1rem;
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    [data-testid="stMetricValue"] {
        font-weight: 600;
        color: #1f1f1f;
    }
    
    [data-testid="stMetricLabel"] {
        font-weight: 500;
        color: #666;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .dataframe {
        width: 100%;
        border-collapse: collapse;
    }
    
    .dataframe th {
        background-color: #f8f9fa;
        font-weight: 600;
        text-align: left;
        padding: 0.75rem;
        border-bottom: 2px solid #e0e0e0;
    }
    
    .dataframe td {
        padding: 0.5rem 0.75rem;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .dataframe tr:hover {
        background-color: #f8f9fa;
    }
    
    /* –í–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 1rem;
        background-color: #f8f9fa;
        padding: 0.5rem;
        border-radius: 6px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: white;
        border-radius: 4px;
        border: 1px solid #e0e0e0;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #1f1f1f;
        color: white;
    }
    
    /* –ì—Ä–∞—Ñ–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
    .plotly-chart {
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        padding: 1rem;
        background-color: white;
    }
    
    /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
    .stAlert {
        border-radius: 6px;
        border: 1px solid;
    }
    
    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
        }
        
        .stButton > button {
            margin: 0.25rem 0;
        }
        
        [data-testid="stMetric"] {
            margin: 0.5rem 0;
        }
    }
    </style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'kium_df' not in st.session_state:
    kium_df, gen_df, hours_df = get_parsed_data()
    st.session_state.kium_df = kium_df
    st.session_state.gen_df = gen_df
    st.session_state.hours_df = hours_df

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
col1, col2 = st.columns([1, 6])
with col1:
    st.markdown("### ‚ö°")
with col2:
    st.title("–ê–¢–≠–¶ - –ê–Ω–∞–ª–∏–∑ –ö–ò–£–ú")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", type=['xlsx'], 
                                   help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2025 –≥–æ–¥")
    
    if uploaded_file is not None:
        try:
            # –ß–∏—Ç–∞–µ–º –æ–±–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            kium_raw = pd.read_excel(uploaded_file, sheet_name='2025', skiprows=1, nrows=7, usecols='A:N')
            gen_raw = pd.read_excel(uploaded_file, sheet_name='2025', skiprows=10, nrows=7, usecols='A:N')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if kium_raw.shape[1] < 14 or gen_raw.shape[1] < 14:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è 14 —Å—Ç–æ–ª–±—Ü–æ–≤ (–¢–ì + 12 –º–µ—Å—è—Ü–µ–≤ + N_—É—Å—Ç/–ö–ò–£–ú_–æ–±—â–∏–π)")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
            gen_df = gen_raw.copy()
            gen_df.columns = ['–¢–ì'] + months + ['N_—É—Å—Ç']
            gen_df = gen_df.fillna(0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ò–£–ú –∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
            kium_data = []
            for _, row in gen_df.iterrows():
                monthly_kium = []
                for month in months:
                    hours = hours_df.loc[hours_df['–ú–µ—Å—è—Ü'] == month, '–ß–∞—Å—ã'].values[0]
                    if row['N_—É—Å—Ç'] > 0 and hours > 0:
                        kium_val = row[month] / (row['N_—É—Å—Ç'] * hours)
                        kium_val = max(0.0, min(1.0, kium_val))
                    else:
                        kium_val = 0.0
                    monthly_kium.append(kium_val)
                kium_data.append({
                    '–¢–ì': row['–¢–ì'],
                    **dict(zip(months, monthly_kium)),
                    '–ö–ò–£–ú_–æ–±—â–∏–π': np.mean(monthly_kium)
                })
            kium_df = pd.DataFrame(kium_data)
            
            st.session_state.kium_df = kium_df
            st.session_state.gen_df = gen_df
            st.session_state.hours_df = hours_df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ö–ò–£–ú –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    st.divider()
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä—ã
    all_tgs = st.session_state.kium_df['–¢–ì'].unique()
    selected_tgs = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì", 
        all_tgs, 
        default=all_tgs,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    selected_months = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü—ã", 
        months, 
        default=months,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
kium_df = st.session_state.kium_df
gen_df = st.session_state.gen_df
hours_df = st.session_state.hours_df

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if selected_tgs:
    filtered_kium = kium_df[kium_df['–¢–ì'].isin(selected_tgs)][['–¢–ì'] + selected_months + ['–ö–ò–£–ú_–æ–±—â–∏–π']]
    filtered_gen = gen_df[gen_df['–¢–ì'].isin(selected_tgs)][['–¢–ì'] + selected_months + ['N_—É—Å—Ç']]
else:
    filtered_kium = kium_df[['–¢–ì'] + selected_months + ['–ö–ò–£–ú_–æ–±—â–∏–π']].iloc[0:0]
    filtered_gen = gen_df[['–¢–ì'] + selected_months + ['N_—É—Å—Ç']].iloc[0:0]

# –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà –ö–ò–£–ú", 
    "‚ö° –í—ã—Ä–∞–±–æ—Ç–∫–∞", 
    "üìä –ê–Ω–∞–ª–∏–∑", 
    "üîÆ –ü—Ä–æ–≥–Ω–æ–∑", 
    "üéØ What-if", 
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
])

with tab1:
    st.header("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏")
    
    if filtered_kium.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì.")
    else:
        # –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            avg_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].mean()
            st.metric("–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú", f"{avg_kium:.2%}")
        with col2:
            max_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].max()
            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ö–ò–£–ú", f"{max_kium:.2%}")
        with col3:
            min_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].min()
            st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ö–ò–£–ú", f"{min_kium:.2%}")
        
        # –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.subheader("–î–∞–Ω–Ω—ã–µ")
            display_kium = filtered_kium.copy()
            for month in selected_months:
                display_kium[month] = display_kium[month].apply(lambda x: f"{x:.2%}")
            display_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] = display_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].apply(lambda x: f"{x:.2%}")
            
            st.dataframe(display_kium, use_container_width=True)
            
            csv = filtered_kium.to_csv(index=False).encode('utf-8')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å CSV", 
                csv, 
                "kium_data.csv",
                help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ö–ò–£–ú –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
            )
        
        with col2:
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
            
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            chart_type = st.radio(
                "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
                ["–õ–∏–Ω–µ–π–Ω—ã–π", "–°—Ç–æ–ª–±—á–∞—Ç—ã–π", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"],
                horizontal=True
            )
            
            if chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π":
                melted = filtered_kium.melt(id_vars=['–¢–ì'], value_vars=selected_months, 
                                          var_name='–ú–µ—Å—è—Ü', value_name='–ö–ò–£–ú')
                fig = px.line(melted, x='–ú–µ—Å—è—Ü', y='–ö–ò–£–ú', color='–¢–ì',
                             title="–î–∏–Ω–∞–º–∏–∫–∞ –ö–ò–£–ú –ø–æ –º–µ—Å—è—Ü–∞–º")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
                
            elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç—ã–π":
                fig = px.bar(filtered_kium, x='–¢–ì', y='–ö–ò–£–ú_–æ–±—â–∏–π',
                            title="–û–±—â–∏–π –ö–ò–£–ú –ø–æ –¢–ì")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
                
            else:
                fig = px.imshow(filtered_kium.set_index('–¢–ì')[selected_months].T, 
                               color_continuous_scale='RdYlGn_r',
                               title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ö–ò–£–ú")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–í—ã—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
    
    if filtered_gen.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì.")
    else:
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
        total_per_tg = filtered_gen[selected_months].sum(axis=1)
        total_gen = total_per_tg.sum()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞", f"{total_gen:,.0f} –ú–í—Ç*—á")
        with col2:
            avg_gen_per_tg = total_per_tg.mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –Ω–∞ –¢–ì", f"{avg_gen_per_tg:,.0f} –ú–í—Ç*—á")
        with col3:
            if not total_per_tg.empty:
                max_gen_tg = filtered_gen.loc[total_per_tg.idxmax(), '–¢–ì']
                st.metric("–õ–∏–¥–µ—Ä", max_gen_tg)
            else:
                st.metric("–õ–∏–¥–µ—Ä", "‚Äî")
        
        # –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.subheader("–î–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
            display_gen = filtered_gen.copy()
            for month in selected_months:
                display_gen[month] = display_gen[month].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
            
            st.dataframe(display_gen, use_container_width=True)
            
            csv = filtered_gen.to_csv(index=False).encode('utf-8')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å CSV", 
                csv, 
                "generation_data.csv",
                help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
            )
        
        with col2:
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
            
            chart_type = st.radio(
                "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
                ["–°—É–º–º–∞—Ä–Ω–∞—è –ø–æ –¢–ì", "–ü–æ–º–µ—Å—è—á–Ω–∞—è"],
                horizontal=True,
                key="gen_chart"
            )
            
            if chart_type == "–°—É–º–º–∞—Ä–Ω–∞—è –ø–æ –¢–ì":
                fig = px.bar(x=filtered_gen['–¢–ì'], y=total_per_tg,
                            title="–°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –¢–ì",
                            labels={'x': '–¢—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', 'y': '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'})
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
            else:
                monthly_totals = filtered_gen[selected_months].sum()
                fig = px.line(x=selected_months, y=monthly_totals,
                             title="–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
                             labels={'x': '–ú–µ—Å—è—Ü', 'y': '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'})
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    if filtered_gen.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì.")
    else:
        total_per_tg = filtered_gen[selected_months].sum(axis=1)
        avg_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].mean()
        total_gen = total_per_tg.sum()
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú", f"{avg_kium:.2%}")
        with col2:
            st.metric("–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞", f"{total_gen:,.0f} –ú–í—Ç*—á")
        with col3:
            total_hours = hours_df[hours_df['–ú–µ—Å—è—Ü'].isin(selected_months)]['–ß–∞—Å—ã'].sum()
            capacity_utilization = total_gen / (filtered_gen['N_—É—Å—Ç'].sum() * total_hours)
            st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–µ–π", f"{capacity_utilization:.2%}")
        with col4:
            best_tg = filtered_kium.loc[filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].idxmax(), '–¢–ì']
            st.metric("–õ—É—á—à–∏–π –ö–ò–£–ú", best_tg)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –¢–ì")
        
        analysis_df = pd.DataFrame({
            '–¢–ì': filtered_gen['–¢–ì'].values,
            '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á': total_per_tg.values,
            '–ö–ò–£–ú, %': (filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].values * 100).round(2),
            'N —É—Å—Ç, –ú–í—Ç': filtered_gen['N_—É—Å—Ç'].values,
        })
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ N_—É—Å—Ç > 0
        total_hours = hours_df[hours_df['–ú–µ—Å—è—Ü'].isin(selected_months)]['–ß–∞—Å—ã'].sum()
        analysis_df['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'] = np.where(
            analysis_df['N —É—Å—Ç, –ú–í—Ç'] > 0,
            (analysis_df['–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'] / (analysis_df['N —É—Å—Ç, –ú–í—Ç'] * total_hours) * 100).round(2),
            0.0
        )
        
        st.dataframe(analysis_df, use_container_width=True)
        
        # –¢–æ–ø-3 –¢–ì
        st.subheader("–¢–æ–ø-3 –ø–æ –≤—ã—Ä–∞–±–æ—Ç–∫–µ")
        top_3 = total_per_tg.nlargest(3)
        for i, (idx, value) in enumerate(top_3.items(), 1):
            tg_name = filtered_gen.loc[idx, '–¢–ì']
            col1, col2 = st.columns([1, 4])
            with col1:
                st.metric(f"#{i}", f"{value:,.0f} –ú–í—Ç*—á")
            with col2:
                progress_value = float(value / top_3.max()) if top_3.max() > 0 else 0
                st.progress(progress_value, text=f"{tg_name}")

with tab4:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
    
    if filtered_gen.empty:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        tg = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", selected_tgs)
        
        if tg:
            data = filtered_gen[filtered_gen['–¢–ì'] == tg][selected_months].T.squeeze()
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å
            start_date = '2025-01-01'
            data.index = pd.date_range(start=start_date, periods=len(data), freq='MS')
            
            col1, col2 = st.columns(2)
            with col1:
                forecast_steps = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 1, 6, 3)
            with col2:
                confidence = st.slider("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", 0.8, 0.99, 0.95)
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
                with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤—Å–µ –Ω—É–ª–∏
                        if data.sum() == 0:
                            st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é.")
                        else:
                            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å ARIMA (–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω—É–∂–Ω–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
                            model = ARIMA(data, order=(1,1,1)).fit()
                            forecast = model.get_forecast(steps=forecast_steps)
                            forecast_index = pd.date_range(start=data.index[-1] + pd.DateOffset(months=1), 
                                                         periods=forecast_steps, freq='MS')
                            
                            fig = go.Figure()
                            
                            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                            fig.add_trace(go.Scatter(
                                x=data.index, y=data, 
                                name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                                line=dict(color='#1f77b4', width=2)
                            ))
                            
                            # –ü—Ä–æ–≥–Ω–æ–∑
                            fig.add_trace(go.Scatter(
                                x=forecast_index, y=forecast.predicted_mean,
                                name='–ü—Ä–æ–≥–Ω–æ–∑',
                                line=dict(color='#ff7f0e', width=2, dash='dash')
                            ))
                            
                            # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            ci = forecast.conf_int(alpha=1-confidence)
                            fig.add_trace(go.Scatter(
                                x=forecast_index.tolist() + forecast_index.tolist()[::-1],
                                y=ci.iloc[:, 0].tolist() + ci.iloc[:, 1].tolist()[::-1],
                                fill='toself',
                                fillcolor='rgba(255, 127, 14, 0.2)',
                                line=dict(color='rgba(255,255,255,0)'),
                                name=f'–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {confidence:.0%}'
                            ))
                            
                            fig.update_layout(
                                title=f"–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {tg}",
                                xaxis_title="–î–∞—Ç–∞",
                                yaxis_title="–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á",
                                height=500
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # –ü—Ä–æ–≥–Ω–æ–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ
                            st.subheader("–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                            forecast_df = pd.DataFrame({
                                '–ú–µ—Å—è—Ü': forecast_index.strftime('%B %Y'),
                                '–ü—Ä–æ–≥–Ω–æ–∑, –ú–í—Ç*—á': forecast.predicted_mean.round(1),
                                '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': ci.iloc[:, 0].round(1),
                                '–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': ci.iloc[:, 1].round(1)
                            })
                            st.dataframe(forecast_df, use_container_width=True)
                            
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

with tab5:
    st.header("–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    if filtered_gen.empty:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        tg = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì", selected_tgs, key="whatif_tg")
        
        if tg:
            orig_row_kium = filtered_kium[filtered_kium['–¢–ì'] == tg].iloc[0]
            orig_row_gen = filtered_gen[filtered_gen['–¢–ì'] == tg].iloc[0]
            orig_n_ust = orig_row_gen['N_—É—Å—Ç']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
                percent_change_n = st.number_input(
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ N_—É—Å—Ç (%)", 
                    value=0.0, 
                    min_value=-50.0, 
                    max_value=100.0,
                    help="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
                )
                
                st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ö–ò–£–ú –ø–æ –º–µ—Å—è—Ü–∞–º (%)")
                change_kium = {}
                for month in selected_months[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                    change_kium[month] = st.number_input(
                        month, 
                        value=0.0, 
                        min_value=-100.0, 
                        max_value=100.0,
                        key=f"kium_{month}"
                    )
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
                for month in selected_months[6:]:
                    change_kium[month] = 0.0
            
            with col2:
                # –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                new_n_ust = orig_n_ust * (1 + percent_change_n / 100)
                new_n_ust = max(0, new_n_ust)  # N_—É—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                
                new_kium = orig_row_kium.copy()
                for month in selected_months:
                    change = change_kium.get(month, 0.0)
                    new_val = orig_row_kium[month] * (1 + change / 100)
                    new_kium[month] = max(0.0, min(1.0, new_val))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º [0, 1]
                new_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] = new_kium[selected_months].mean()
                
                hours_monthly = hours_df.set_index('–ú–µ—Å—è—Ü')['–ß–∞—Å—ã']
                new_gen = pd.Series(index=selected_months, dtype=float)
                for month in selected_months:
                    new_gen[month] = new_kium[month] * new_n_ust * hours_monthly[month]
                new_gen_total = new_gen.sum()
                
                orig_gen = orig_row_gen[selected_months]
                orig_gen_total = orig_gen.sum()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                kium_change_pct = 0.0
                if orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] > 0:
                    kium_change_pct = (new_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] - orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π']) / orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] * 100
                
                gen_change_pct = 0.0
                if orig_gen_total > 0:
                    gen_change_pct = (new_gen_total - orig_gen_total) / orig_gen_total * 100
                
                results_df = pd.DataFrame({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['N_—É—Å—Ç, –ú–í—Ç', '–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú', '–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'],
                    '–ë–∞–∑–æ–≤—ã–π': [orig_n_ust, f"{orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π']:.2%}", f"{orig_gen_total:,.0f}"],
                    '–°—Ü–µ–Ω–∞—Ä–∏–π': [f"{new_n_ust:.1f}", f"{new_kium['–ö–ò–£–ú_–æ–±—â–∏–π']:.2%}", f"{new_gen_total:,.0f}"],
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': [
                        f"{percent_change_n:+.1f}%",
                        f"{kium_change_pct:+.1f}%",
                        f"{gen_change_pct:+.1f}%"
                    ]
                })
                
                st.dataframe(results_df, use_container_width=True, hide_index=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                compare_df = pd.DataFrame({
                    '–ú–µ—Å—è—Ü': selected_months,
                    '–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π': orig_gen,
                    '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π': new_gen
                }).melt(id_vars='–ú–µ—Å—è—Ü', var_name='–°—Ü–µ–Ω–∞—Ä–∏–π', value_name='–í—ã—Ä–∞–±–æ—Ç–∫–∞')
                
                fig = px.bar(compare_df, x='–ú–µ—Å—è—Ü', y='–í—ã—Ä–∞–±–æ—Ç–∫–∞', color='–°—Ü–µ–Ω–∞—Ä–∏–π', 
                            barmode='group', title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

with tab6:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        data_type = st.selectbox("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", ['–í—ã—Ä–∞–±–æ—Ç–∫–∞'])  # –ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        tg_name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ì", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–ì-8")
        
        if tg_name:
            st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º:")
            col1a, col2a, col3a = st.columns(3)
            new_data = {}
            
            with col1a:
                for month in months[:4]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            with col2a:
                for month in months[4:8]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            with col3a:
                for month in months[8:]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            
            n_ust = st.number_input("N —É—Å—Ç (–ú–í—Ç)", value=0.0, min_value=0.0)
            
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                if n_ust <= 0:
                    st.error("N —É—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ gen_df
                    new_row_gen = pd.DataFrame([{'–¢–ì': tg_name, **new_data, 'N_—É—Å—Ç': n_ust}])
                    st.session_state.gen_df = pd.concat([st.session_state.gen_df, new_row_gen], ignore_index=True)
                    
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º kium_df
                    gen_df = st.session_state.gen_df
                    kium_data = []
                    for _, row in gen_df.iterrows():
                        monthly_kium = []
                        for month in months:
                            hours = hours_df.loc[hours_df['–ú–µ—Å—è—Ü'] == month, '–ß–∞—Å—ã'].values[0]
                            if row['N_—É—Å—Ç'] > 0 and hours > 0:
                                kium_val = row[month] / (row['N_—É—Å—Ç'] * hours)
                                kium_val = max(0.0, min(1.0, kium_val))
                            else:
                                kium_val = 0.0
                            monthly_kium.append(kium_val)
                        kium_data.append({
                            '–¢–ì': row['–¢–ì'],
                            **dict(zip(months, monthly_kium)),
                            '–ö–ò–£–ú_–æ–±—â–∏–π': np.mean(monthly_kium)
                        })
                    st.session_state.kium_df = pd.DataFrame(kium_data)
                    
                    st.success(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {tg_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    st.rerun()
    
    with col2:
        st.subheader("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
        
        st.write("**–¢—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:**")
        for tg in kium_df['–¢–ì'].unique():
            st.write(f"‚Ä¢ {tg}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º"):
            kium_df, gen_df, hours_df = get_parsed_data()
            st.session_state.kium_df = kium_df
            st.session_state.gen_df = gen_df
            st.session_state.hours_df = hours_df
            st.success("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º")
            st.rerun()
        
        st.divider()
        st.subheader("–û —Å–∏—Å—Ç–µ–º–µ")
        st.write("""
        **–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤.
        
        –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –∏ N_—É—Å—Ç
        ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏
        ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        
        –î–ª—è —Å–≤—è–∑–∏: example@company.com
        """)

# –§—É—Ç–µ—Ä
st.divider()
st.markdown(
    "<div style='text-align: center; color: #666; font-size: 0.9rem;'>"
    "–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Ä¢ v1.1 ‚Ä¢ 2024"
    "</div>",
    unsafe_allow_html=True
)
