# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
# pip install streamlit pandas numpy plotly statsmodels requests

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from statsmodels.tsa.arima.model import ARIMA
import requests
import io
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–í–û–ô
st.set_page_config(
    page_title="–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–ª—è –¥–µ—Ñ–æ–ª—Ç–∞) - –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
TEXT_DATA = """
row3: –¢–ì-1,0.7328471198156682,0.8120683673469389,0.775663133640553,0.7069816666666666,0.6136569124423963,0.23684261904761905,0.5779423963133641,0,0,0,0,0,0.3691946281800391
row4: –¢–ì-2,0.8102637096774193,0.944525,0.8871923963133641,0.3771666666666667,0.5168207373271889,0.28462190476190474,0.5132366359447005,0,0,0,0,0,0.3585021232876712
row5: –¢–ì-3,0.3024148233486943,0.9418595238095238,0.6418884792626729,0.4908720634920635,0.3746497695852534,0.6992368253968254,0.6340451612903226,0,0,0,0,0,0.3359404892367906
row6: –¢–ì-4,0.7797910497091485,0.057489510148321626,0.37599365415124275,0.8467934426229508,0.5802938921205711,0.7388691256830602,0.5944280803807509,0,0,0,0,0,0.3326720282206752
row7: –¢–ì-5,0,0,0,0,0,0.00047583333333333337,0.0006647849462365591,0,0,0,0,0,0.00009557077625570777
row8: –¢–ì-6,0.012135618279569892,0.0005714285714285714,0,0,0,0,0,0,0,0,0,0,0.0010745319634703197
row9: –¢–ì-7,0.8838499999999999,0.9378366071428571,0.7883255376344086,0.38926083333333333,0.5079059139784946,0.2152377777777778,0,0,0,0,0,0,0.3067860502283105
row12: –¢–ì-1,19083.339,19099.848,20198.268,17815.938,15979.626,5968.434,15049.62,,,,,,35
row13: –¢–ì-2,21099.267,22215.228,23102.49,9504.6,13458.012,7172.472,13364.682,,,,,,35
row14: –¢–ì-3,7874.882,22152.536,16714.776,12369.976,9755.88,17620.768,16510.536,,,,,,35
row15: –¢–ì-4,35390.037,2356.61,17064.096,37191.168,26336.058,32451.132,26977.524,,,,,,61
row16: –¢–ì-5,0,0,0,0,0,13.704,19.784,,,,,,40
row17: –¢–ì-6,180.578,7.68,0,0,0,0,0,,,,,,20
row18: –¢–ì-7,19727.532,18906.786,17595.426,8408.034,11336.46,4649.136,0,,,,,,30
"""

months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
hours_per_month = [744, 672, 744, 720, 744, 720, 744, 744, 720, 744, 720, 744]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ò–£–ú –∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
def calculate_kium_from_generation(gen_df, hours_df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ö–ò–£–ú –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏"""
    kium_data = []
    
    for _, row in gen_df.iterrows():
        tg = row['–¢–ì']
        n_ust = row['N_—É—Å—Ç']
        kium_row = {'–¢–ì': tg}
        
        monthly_kium = []
        for i, month in enumerate(months):
            generation = row[month]
            hours = hours_per_month[i]
            # –ö–ò–£–ú = –í—ã—Ä–∞–±–æ—Ç–∫–∞ / (N_—É—Å—Ç √ó –ß–∞—Å—ã)
            if n_ust > 0 and hours > 0:
                kium = generation / (n_ust * hours)
            else:
                kium = 0.0
            kium_row[month] = kium
            monthly_kium.append(kium)
        
        # –û–±—â–∏–π –ö–ò–£–ú –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –≥–æ–¥
        kium_row['–ö–ò–£–ú_–æ–±—â–∏–π'] = np.mean(monthly_kium)
        kium_data.append(kium_row)
    
    return pd.DataFrame(kium_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
def parse_data_from_text(text_data):
    lines = text_data.strip().split('\n')
    
    # –ü–∞—Ä—Å–∏–º –í–´–†–ê–ë–û–¢–ö–£ –ú–í—Ç*—á: rows 12-18 (—ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    generation_data = {}
    for line in lines:
        if ':' in line:
            row_part = line.split(':')[0]
            if row_part.startswith('row') and row_part[3:].isdigit():
                row_num = int(row_part[3:])
                if 12 <= row_num <= 18:
                    content = line.split(':')[1].strip()
                    parts = [p.strip() for p in content.split(',')]
                    if len(parts) > 0 and parts[0].startswith('–¢–ì-'):
                        tg = parts[0]
                        values = []
                        for i in range(1, 13):
                            if i < len(parts):
                                try:
                                    values.append(float(parts[i]))
                                except ValueError:
                                    values.append(0.0)
                            else:
                                values.append(0.0)
                        generation_data[tg] = {months[i]: values[i] for i in range(12)}
                        if len(parts) > 13:
                            generation_data[tg]['N_—É—Å—Ç'] = float(parts[13])
                        else:
                            generation_data[tg]['N_—É—Å—Ç'] = 0
    
    # DataFrame –¥–ª—è –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    gen_data = []
    for tg, data in generation_data.items():
        row = {'–¢–ì': tg}
        for month in months:
            row[month] = data.get(month, 0)
        row['N_—É—Å—Ç'] = data.get('N_—É—Å—Ç', 0)
        gen_data.append(row)
    gen_df = pd.DataFrame(gen_data)
    
    # –ß–∞—Å—ã –≤ –º–µ—Å—è—Ü–∞—Ö
    hours_df = pd.DataFrame({'–ú–µ—Å—è—Ü': months, '–ß–∞—Å—ã': hours_per_month})
    
    # –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ö–ò–£–ú –∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫ 3-9)
    kium_df = calculate_kium_from_generation(gen_df, hours_df)
    
    return kium_df, gen_df, hours_df

# –ö—ç—à–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
@st.cache_data
def get_parsed_data():
    return parse_data_from_text(TEXT_DATA)

# –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π CSS –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1 {
        color: #1f1f1f;
        font-weight: 600;
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
        font-size: 1.8rem;
    }
    
    h2, h3 {
        color: #2c2c2c;
        font-weight: 500;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .css-1d391kg {
        background-color: #f8f9fa;
        border-right: 1px solid #e0e0e0;
    }
    
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        width: 100%;
        border-radius: 4px;
        border: 1px solid #d0d0d0;
        background-color: white;
        color: #1f1f1f;
        font-weight: 500;
        padding: 0.5rem 1rem;
        transition: all 0.2s;
    }
    
    .stButton > button:hover {
        background-color: #f0f0f0;
        border-color: #a0a0a0;
    }
    
    .stButton > button:focus {
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
    
    /* –°–µ–ª–µ–∫—Ç—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div > select,
    .stTextInput > div > div > input,
    .stNumberInput > div > div > input {
        border: 1px solid #d0d0d0;
        border-radius: 4px;
        background-color: white;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="stMetric"] {
        background-color: white;
        padding: 1rem;
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    [data-testid="stMetricValue"] {
        font-weight: 600;
        color: #1f1f1f;
    }
    
    [data-testid="stMetricLabel"] {
        font-weight: 500;
        color: #666;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .dataframe {
        width: 100%;
        border-collapse: collapse;
    }
    
    .dataframe th {
        background-color: #f8f9fa;
        font-weight: 600;
        text-align: left;
        padding: 0.75rem;
        border-bottom: 2px solid #e0e0e0;
    }
    
    .dataframe td {
        padding: 0.5rem 0.75rem;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .dataframe tr:hover {
        background-color: #f8f9fa;
    }
    
    /* –í–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 1rem;
        background-color: #f8f9fa;
        padding: 0.5rem;
        border-radius: 6px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: white;
        border-radius: 4px;
        border: 1px solid #e0e0e0;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #1f1f1f;
        color: white;
    }
    
    /* –ì—Ä–∞—Ñ–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
    .plotly-chart {
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        padding: 1rem;
        background-color: white;
    }
    
    /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
    .stAlert {
        border-radius: 6px;
        border: 1px solid;
    }
    
    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
        }
        
        .stButton > button {
            margin: 0.25rem 0;
        }
        
        [data-testid="stMetric"] {
            margin: 0.5rem 0;
        }
    }
    </style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'kium_df' not in st.session_state:
    kium_df, gen_df, hours_df = get_parsed_data()
    st.session_state.kium_df = kium_df
    st.session_state.gen_df = gen_df
    st.session_state.hours_df = hours_df

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
col1, col2 = st.columns([1, 6])
with col1:
    st.markdown("### ‚ö°")
with col2:
    st.title("–ê–¢–≠–¶ - –ê–Ω–∞–ª–∏–∑ –ö–ò–£–ú")
    st.caption("–ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", type=['xlsx'], 
                                   help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ 2025 –≥–æ–¥")
    
    if uploaded_file is not None:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤–∏—á–Ω—ã–µ)
            gen_df = pd.read_excel(uploaded_file, sheet_name='2025', skiprows=10, nrows=7, usecols='A:N')
            gen_df.columns = ['–¢–ì'] + months + ['N_—É—Å—Ç']
            
            # –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ö–ò–£–ú –∏–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
            kium_df = calculate_kium_from_generation(gen_df, pd.DataFrame({'–ú–µ—Å—è—Ü': months, '–ß–∞—Å—ã': hours_per_month}))
            
            hours_df = pd.DataFrame({'–ú–µ—Å—è—Ü': months, '–ß–∞—Å—ã': hours_per_month})
            
            st.session_state.kium_df = kium_df
            st.session_state.gen_df = gen_df
            st.session_state.hours_df = hours_df
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ö–ò–£–ú –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    st.divider()
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä—ã
    selected_tgs = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì", 
        st.session_state.kium_df['–¢–ì'].unique(), 
        default=st.session_state.kium_df['–¢–ì'].unique(),
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    selected_months = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü—ã", 
        months, 
        default=months,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
kium_df = st.session_state.kium_df
gen_df = st.session_state.gen_df
hours_df = st.session_state.hours_df

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
filtered_kium = kium_df[kium_df['–¢–ì'].isin(selected_tgs)][['–¢–ì'] + selected_months + ['–ö–ò–£–ú_–æ–±—â–∏–π']]
filtered_gen = gen_df[gen_df['–¢–ì'].isin(selected_tgs)][['–¢–ì'] + selected_months + ['N_—É—Å—Ç']]

# –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà –ö–ò–£–ú", 
    "‚ö° –í—ã—Ä–∞–±–æ—Ç–∫–∞", 
    "üìä –ê–Ω–∞–ª–∏–∑", 
    "üîÆ –ü—Ä–æ–≥–Ω–æ–∑", 
    "üéØ What-if", 
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
])

with tab1:
    st.header("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏")
    st.info("üí° –ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ö–ò–£–ú = –í—ã—Ä–∞–±–æ—Ç–∫–∞ / (N_—É—Å—Ç √ó –ß–∞—Å—ã)")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        avg_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú", f"{avg_kium:.2%}")
    with col2:
        max_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].max()
        max_tg = filtered_kium.loc[filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].idxmax(), '–¢–ì']
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ö–ò–£–ú", f"{max_kium:.2%}", delta=f"{max_tg}")
    with col3:
        min_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].min()
        min_tg = filtered_kium.loc[filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].idxmin(), '–¢–ì']
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ö–ò–£–ú", f"{min_kium:.2%}", delta=f"{min_tg}")
    
    # –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("–†–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ö–ò–£–ú")
        display_kium = filtered_kium.copy()
        for month in selected_months:
            display_kium[month] = display_kium[month].apply(lambda x: f"{x:.2%}")
        display_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] = display_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].apply(lambda x: f"{x:.2%}")
        
        st.dataframe(display_kium, use_container_width=True)
        
        csv = filtered_kium.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV", 
            csv, 
            "kium_data.csv",
            help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ö–ò–£–ú –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
        )
    
    with col2:
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_type = st.radio(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
            ["–õ–∏–Ω–µ–π–Ω—ã–π", "–°—Ç–æ–ª–±—á–∞—Ç—ã–π", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"],
            horizontal=True
        )
        
        if chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π":
            melted = filtered_kium.melt(id_vars=['–¢–ì'], value_vars=selected_months, 
                                      var_name='–ú–µ—Å—è—Ü', value_name='–ö–ò–£–ú')
            fig = px.line(melted, x='–ú–µ—Å—è—Ü', y='–ö–ò–£–ú', color='–¢–ì',
                         title="–î–∏–Ω–∞–º–∏–∫–∞ –ö–ò–£–ú –ø–æ –º–µ—Å—è—Ü–∞–º")
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç—ã–π":
            fig = px.bar(filtered_kium, x='–¢–ì', y='–ö–ò–£–ú_–æ–±—â–∏–π',
                        title="–û–±—â–∏–π –ö–ò–£–ú –ø–æ –¢–ì")
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
            
        else:
            fig = px.imshow(filtered_kium.set_index('–¢–ì')[selected_months].T, 
                           color_continuous_scale='RdYlGn',
                           title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ö–ò–£–ú")
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–í—ã—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏")
    st.info("üí° –≠—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ö–ò–£–ú")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
    total_per_tg = filtered_gen[selected_months].sum(axis=1)
    total_gen = total_per_tg.sum()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞", f"{total_gen:,.0f} –ú–í—Ç*—á")
    with col2:
        avg_gen_per_tg = total_per_tg.mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è –Ω–∞ –¢–ì", f"{avg_gen_per_tg:,.0f} –ú–í—Ç*—á")
    with col3:
        max_gen_tg = filtered_gen.loc[total_per_tg.idxmax(), '–¢–ì']
        st.metric("–õ–∏–¥–µ—Ä", max_gen_tg)
    
    # –î–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("–î–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
        display_gen = filtered_gen.copy()
        for month in selected_months:
            display_gen[month] = display_gen[month].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
        
        st.dataframe(display_gen, use_container_width=True)
        
        csv = filtered_gen.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV", 
            csv, 
            "generation_data.csv",
            help="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
        )
    
    with col2:
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
        
        chart_type = st.radio(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
            ["–°—É–º–º–∞—Ä–Ω–∞—è –ø–æ –¢–ì", "–ü–æ–º–µ—Å—è—á–Ω–∞—è"],
            horizontal=True,
            key="gen_chart"
        )
        
        if chart_type == "–°—É–º–º–∞—Ä–Ω–∞—è –ø–æ –¢–ì":
            fig = px.bar(x=filtered_gen['–¢–ì'], y=total_per_tg,
                        title="–°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –¢–ì",
                        labels={'x': '–¢—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', 'y': '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'})
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        else:
            monthly_totals = filtered_gen[selected_months].sum()
            fig = px.line(x=selected_months, y=monthly_totals,
                         title="–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º",
                         labels={'x': '–ú–µ—Å—è—Ü', 'y': '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'})
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    st.info("üí° –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    total_per_tg = filtered_gen[selected_months].sum(axis=1)
    avg_kium = filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].mean()
    total_gen = total_per_tg.sum()
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú", f"{avg_kium:.2%}")
    with col2:
        st.metric("–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞", f"{total_gen:,.0f} –ú–í—Ç*—á")
    with col3:
        total_hours = hours_df[hours_df['–ú–µ—Å—è—Ü'].isin(selected_months)]['–ß–∞—Å—ã'].sum()
        capacity_utilization = total_gen / (filtered_gen['N_—É—Å—Ç'].sum() * total_hours)
        st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–µ–π", f"{capacity_utilization:.2%}")
    with col4:
        best_tg = filtered_kium.loc[filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].idxmax(), '–¢–ì']
        st.metric("–õ—É—á—à–∏–π –ö–ò–£–ú", best_tg)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –¢–ì")
    
    analysis_df = pd.DataFrame({
        '–¢–ì': filtered_gen['–¢–ì'].values,
        '–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á': total_per_tg.values,
        '–ö–ò–£–ú, %': (filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].values * 100).round(2),
        'N —É—Å—Ç, –ú–í—Ç': filtered_gen['N_—É—Å—Ç'].values,
        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': (filtered_kium['–ö–ò–£–ú_–æ–±—â–∏–π'].values * 100).round(2)
    })
    
    st.dataframe(analysis_df, use_container_width=True)
    
    # –¢–æ–ø-3 –¢–ì
    st.subheader("–¢–æ–ø-3 –ø–æ –≤—ã—Ä–∞–±–æ—Ç–∫–µ")
    top_3 = total_per_tg.nlargest(3)
    for i, (idx, value) in enumerate(top_3.items(), 1):
        tg_name = filtered_gen.loc[idx, '–¢–ì']
        col1, col2 = st.columns([1, 4])
        with col1:
            st.metric(f"#{i}", f"{value:,.0f} –ú–í—Ç*—á")
        with col2:
            progress_value = float(value / top_3.max()) if top_3.max() > 0 else 0
            st.progress(progress_value, text=f"{tg_name}")

with tab4:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏")
    
    if len(selected_tgs) == 0:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        tg = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", selected_tgs)
        
        if tg:
            data = filtered_gen[filtered_gen['–¢–ì'] == tg][selected_months].T.squeeze()
            data.index = pd.date_range(start='2025-01-01', periods=len(data), freq='M')
            
            col1, col2 = st.columns(2)
            with col1:
                forecast_steps = st.slider("–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü—ã)", 1, 6, 3)
            with col2:
                confidence = st.slider("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", 0.8, 0.99, 0.95)
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
                with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                    try:
                        model = ARIMA(data, order=(1,1,1)).fit()
                        forecast = model.get_forecast(steps=forecast_steps)
                        forecast_index = pd.date_range(start=data.index[-1] + pd.DateOffset(months=1), 
                                                     periods=forecast_steps, freq='M')
                        
                        fig = go.Figure()
                        
                        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        fig.add_trace(go.Scatter(
                            x=data.index, y=data, 
                            name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                            line=dict(color='#1f77b4', width=2)
                        ))
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        fig.add_trace(go.Scatter(
                            x=forecast_index, y=forecast.predicted_mean,
                            name='–ü—Ä–æ–≥–Ω–æ–∑',
                            line=dict(color='#ff7f0e', width=2, dash='dash')
                        ))
                        
                        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        ci = forecast.conf_int(alpha=1-confidence)
                        fig.add_trace(go.Scatter(
                            x=forecast_index.tolist() + forecast_index.tolist()[::-1],
                            y=ci.iloc[:, 0].tolist() + ci.iloc[:, 1].tolist()[::-1],
                            fill='toself',
                            fillcolor='rgba(255, 127, 14, 0.2)',
                            line=dict(color='rgba(255,255,255,0)'),
                            name=f'–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {confidence:.0%}'
                        ))
                        
                        fig.update_layout(
                            title=f"–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {tg}",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–í—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á",
                            height=500
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        st.subheader("–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        forecast_df = pd.DataFrame({
                            '–ú–µ—Å—è—Ü': forecast_index.strftime('%B %Y'),
                            '–ü—Ä–æ–≥–Ω–æ–∑, –ú–í—Ç*—á': forecast.predicted_mean.round(1),
                            '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': ci.iloc[:, 0].round(1),
                            '–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': ci.iloc[:, 1].round(1)
                        })
                        st.dataframe(forecast_df, use_container_width=True)
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

with tab5:
    st.header("–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    st.info("üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –≤—ã—Ä–∞–±–æ—Ç–∫–µ, –ö–ò–£–ú –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    if len(selected_tgs) == 0:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¢–ì –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        tg = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¢–ì", selected_tgs, key="whatif_tg")
        
        if tg:
            orig_row_kium = filtered_kium[filtered_kium['–¢–ì'] == tg].iloc[0]
            orig_row_gen = filtered_gen[filtered_gen['–¢–ì'] == tg].iloc[0]
            orig_n_—É—Å—Ç = orig_row_gen['N_—É—Å—Ç']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
                percent_change_n = st.number_input(
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ N_—É—Å—Ç (%)", 
                    value=0.0, 
                    min_value=-50.0, 
                    max_value=100.0,
                    help="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
                )
                
                st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (%)")
                change_gen = {}
                for month in selected_months[:6]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                    change_gen[month] = st.number_input(
                        f"{month} - –≤—ã—Ä–∞–±–æ—Ç–∫–∞", 
                        value=0.0, 
                        min_value=-100.0, 
                        max_value=100.0,
                        key=f"gen_{month}"
                    )
            
            with col2:
                # –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                new_n_—É—Å—Ç = orig_n_—É—Å—Ç * (1 + percent_change_n / 100)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –≤—ã—Ä–∞–±–æ—Ç–∫–µ
                new_gen = pd.Series(index=selected_months)
                for month in selected_months:
                    change = change_gen.get(month, 0.0)
                    new_gen[month] = max(0, orig_row_gen[month] * (1 + change / 100))
                
                new_gen_total = new_gen.sum()
                orig_gen_total = orig_row_gen[selected_months].sum()
                
                # –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ö–ò–£–ú –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –≤—ã—Ä–∞–±–æ—Ç–∫–∏
                new_kium = pd.Series(index=selected_months)
                for i, month in enumerate(selected_months):
                    hours = hours_per_month[months.index(month)]
                    if new_n_—É—Å—Ç > 0 and hours > 0:
                        new_kium[month] = new_gen[month] / (new_n_—É—Å—Ç * hours)
                    else:
                        new_kium[month] = 0.0
                
                new_kium_avg = new_kium.mean()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")
                
                results_df = pd.DataFrame({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['N_—É—Å—Ç, –ú–í—Ç', '–°—Ä–µ–¥–Ω–∏–π –ö–ò–£–ú', '–û–±—â–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞, –ú–í—Ç*—á'],
                    '–ë–∞–∑–æ–≤—ã–π': [orig_n_—É—Å—Ç, f"{orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π']:.2%}", f"{orig_gen_total:,.0f}"],
                    '–°—Ü–µ–Ω–∞—Ä–∏–π': [f"{new_n_—É—Å—Ç:.1f}", f"{new_kium_avg:.2%}", f"{new_gen_total:,.0f}"],
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': [
                        f"{percent_change_n:+.1f}%",
                        f"{(new_kium_avg - orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π']) / orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] * 100:+.1f}%" if orig_row_kium['–ö–ò–£–ú_–æ–±—â–∏–π'] > 0 else "N/A",
                        f"{(new_gen_total - orig_gen_total) / orig_gen_total * 100:+.1f}%" if orig_gen_total > 0 else "N/A"
                    ]
                })
                
                st.dataframe(results_df, use_container_width=True, hide_index=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                compare_df = pd.DataFrame({
                    '–ú–µ—Å—è—Ü': selected_months,
                    '–ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π': orig_row_gen[selected_months],
                    '–ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π': new_gen
                }).melt(id_vars='–ú–µ—Å—è—Ü', var_name='–°—Ü–µ–Ω–∞—Ä–∏–π', value_name='–í—ã—Ä–∞–±–æ—Ç–∫–∞')
                
                fig = px.bar(compare_df, x='–ú–µ—Å—è—Ü', y='–í—ã—Ä–∞–±–æ—Ç–∫–∞', color='–°—Ü–µ–Ω–∞—Ä–∏–π', 
                            barmode='group', title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)

with tab6:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.info("üí° –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ - –ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        data_type = st.selectbox("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", ['–í—ã—Ä–∞–±–æ—Ç–∫–∞'])
        tg_name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ì")
        
        if tg_name:
            st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –í–´–†–ê–ë–û–¢–ö–ò –ø–æ –º–µ—Å—è—Ü–∞–º (–ú–í—Ç*—á):")
            col1, col2, col3 = st.columns(3)
            new_data = {}
            
            with col1:
                for month in months[:4]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            with col2:
                for month in months[4:8]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            with col3:
                for month in months[8:]:
                    new_data[month] = st.number_input(month, value=0.0, key=f"new_{month}")
            
            n_ust = st.number_input("N —É—Å—Ç (–ú–í—Ç)", value=0.0)
            
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏
                new_gen_row = pd.DataFrame([{'–¢–ì': tg_name, **new_data, 'N_—É—Å—Ç': n_ust}])
                st.session_state.gen_df = pd.concat([st.session_state.gen_df, new_gen_row], ignore_index=True)
                
                # –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ö–ò–£–ú –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                st.session_state.kium_df = calculate_kium_from_generation(
                    st.session_state.gen_df, 
                    st.session_state.hours_df
                )
                
                st.success(f"–î–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {tg_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ö–ò–£–ú –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω")
                st.rerun()
    
    with col2:
        st.subheader("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
        
        st.write("**–¢—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:**")
        for tg in kium_df['–¢–ì'].unique():
            st.write(f"‚Ä¢ {tg}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º"):
            kium_df, gen_df, hours_df = get_parsed_data()
            st.session_state.kium_df = kium_df
            st.session_state.gen_df = gen_df
            st.session_state.hours_df = hours_df
            st.success("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º")
            st.rerun()
        
        st.divider()
        st.subheader("–û —Å–∏—Å—Ç–µ–º–µ")
        st.write("""
        **–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤.
        
        **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
        ‚Ä¢ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ö–ò–£–ú –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
          –ö–ò–£–ú = –í—ã—Ä–∞–±–æ—Ç–∫–∞ / (N_—É—Å—Ç √ó –ß–∞—Å—ã)
        ‚Ä¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        
        –î–ª—è —Å–≤—è–∑–∏: example@company.com
        """)

# –§—É—Ç–µ—Ä
st.divider()
st.markdown(
    "<div style='text-align: center; color: #666; font-size: 0.9rem;'>"
    "–ê–¢–≠–¶ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Ä¢ v2.0 ‚Ä¢ 2024 ‚Ä¢ –î–∞–Ω–Ω—ã–µ –ö–ò–£–ú —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    "</div>",
    unsafe_allow_html=True
)
